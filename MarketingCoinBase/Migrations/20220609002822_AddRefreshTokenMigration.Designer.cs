// <auto-generated />
using System;
using MarketingCoinBase.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MarketingCoinBase.Migrations
{
    [DbContext(typeof(CoinBaseDB))]
    [Migration("20220609002822_AddRefreshTokenMigration")]
    partial class AddRefreshTokenMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MarketingCoinBase.Models.AccountBalances", b =>
                {
                    b.Property<long>("balanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("soldeBalance")
                        .HasColumnType("float");

                    b.Property<double>("soldeInvest")
                        .HasColumnType("float");

                    b.HasKey("balanceID");

                    b.ToTable("AccountBalances");
                });

            modelBuilder.Entity("MarketingCoinBase.Models.Commissions", b =>
                {
                    b.Property<long>("commissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("commission")
                        .HasColumnType("float");

                    b.Property<int>("datePeriod")
                        .HasColumnType("int");

                    b.Property<double>("totMumbers")
                        .HasColumnType("float");

                    b.HasKey("commissionID");

                    b.ToTable("Commissions");
                });

            modelBuilder.Entity("MarketingCoinBase.Models.Partners", b =>
                {
                    b.Property<long>("partnerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("partnerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("partnerID");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("MarketingCoinBase.Models.Roles", b =>
                {
                    b.Property<long>("roleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("roleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MarketingCoinBase.Models.ServeProds", b =>
                {
                    b.Property<long>("serveProdID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<long>("partnerID")
                        .HasColumnType("bigint");

                    b.Property<long?>("partnerspartnerID")
                        .HasColumnType("bigint");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<string>("typeOfService")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("serveProdID");

                    b.HasIndex("partnerspartnerID");

                    b.ToTable("ServeProds");
                });

            modelBuilder.Entity("MarketingCoinBase.Models.UserPartners", b =>
                {
                    b.Property<long>("userPartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("balanceID")
                        .HasColumnType("bigint");

                    b.Property<long>("commissionID")
                        .HasColumnType("bigint");

                    b.Property<long>("partnerID")
                        .HasColumnType("bigint");

                    b.Property<long>("userID")
                        .HasColumnType("bigint");

                    b.HasKey("userPartID");

                    b.HasIndex("balanceID")
                        .IsUnique();

                    b.HasIndex("commissionID")
                        .IsUnique();

                    b.HasIndex("partnerID");

                    b.HasIndex("userID");

                    b.ToTable("UserPartners");
                });

            modelBuilder.Entity("MarketingCoinBase.Models.Users", b =>
                {
                    b.Property<long>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("roleID")
                        .HasColumnType("bigint");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<long?>("userRef")
                        .HasColumnType("bigint");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userID");

                    b.HasIndex("roleID");

                    b.HasIndex("userRef");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MarketingCoinBase.Models.ServeProds", b =>
                {
                    b.HasOne("MarketingCoinBase.Models.Partners", "partners")
                        .WithMany()
                        .HasForeignKey("partnerspartnerID");

                    b.Navigation("partners");
                });

            modelBuilder.Entity("MarketingCoinBase.Models.UserPartners", b =>
                {
                    b.HasOne("MarketingCoinBase.Models.AccountBalances", "balance")
                        .WithOne("userPartners")
                        .HasForeignKey("MarketingCoinBase.Models.UserPartners", "balanceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketingCoinBase.Models.Commissions", "commission")
                        .WithOne("userPartners")
                        .HasForeignKey("MarketingCoinBase.Models.UserPartners", "commissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketingCoinBase.Models.Partners", "partner")
                        .WithMany()
                        .HasForeignKey("partnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketingCoinBase.Models.Users", "user")
                        .WithMany()
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("balance");

                    b.Navigation("commission");

                    b.Navigation("partner");

                    b.Navigation("user");
                });

            modelBuilder.Entity("MarketingCoinBase.Models.Users", b =>
                {
                    b.HasOne("MarketingCoinBase.Models.Roles", "role")
                        .WithMany()
                        .HasForeignKey("roleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketingCoinBase.Models.Users", "user")
                        .WithMany()
                        .HasForeignKey("userRef");

                    b.OwnsMany("MarketingCoinBase.Models.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTime>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("datetime2");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("datetime2");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Token")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<long>("UsersuserID")
                                .HasColumnType("bigint");

                            b1.HasKey("Id");

                            b1.HasIndex("UsersuserID");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("UsersuserID");
                        });

                    b.Navigation("RefreshTokens");

                    b.Navigation("role");

                    b.Navigation("user");
                });

            modelBuilder.Entity("MarketingCoinBase.Models.AccountBalances", b =>
                {
                    b.Navigation("userPartners");
                });

            modelBuilder.Entity("MarketingCoinBase.Models.Commissions", b =>
                {
                    b.Navigation("userPartners");
                });
#pragma warning restore 612, 618
        }
    }
}
