// <auto-generated />
using System;
using MarketingCoinBase.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MarketingCoinBase.Migrations
{
    [DbContext(typeof(CoinBaseDB))]
    partial class CoinBaseDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MarketingCoinBase.Models.AccountBalances", b =>
                {
                    b.Property<long>("balanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("soldeBalance")
                        .HasColumnType("float");

                    b.Property<double>("soldeInvest")
                        .HasColumnType("float");

                    b.HasKey("balanceID");

                    b.ToTable("AccountBalances");
                });

            modelBuilder.Entity("MarketingCoinBase.Models.Commissions", b =>
                {
                    b.Property<long>("commissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("commission")
                        .HasColumnType("float");

                    b.Property<int>("datePeriod")
                        .HasColumnType("int");

                    b.Property<double>("totMumbers")
                        .HasColumnType("float");

                    b.HasKey("commissionID");

                    b.ToTable("Commissions");
                });

            modelBuilder.Entity("MarketingCoinBase.Models.Roles", b =>
                {
                    b.Property<long>("roleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("roleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MarketingCoinBase.Models.Users", b =>
                {
                    b.Property<long>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("balanceID")
                        .HasColumnType("bigint");

                    b.Property<long>("commissionID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("roleID")
                        .HasColumnType("bigint");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<long?>("userRef")
                        .HasColumnType("bigint");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userID");

                    b.HasIndex("balanceID");

                    b.HasIndex("commissionID");

                    b.HasIndex("roleID");

                    b.HasIndex("userRef");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MarketingCoinBase.Models.Users", b =>
                {
                    b.HasOne("MarketingCoinBase.Models.AccountBalances", "balance")
                        .WithMany("users")
                        .HasForeignKey("balanceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketingCoinBase.Models.Commissions", "commission")
                        .WithMany()
                        .HasForeignKey("commissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketingCoinBase.Models.Roles", "role")
                        .WithMany()
                        .HasForeignKey("roleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketingCoinBase.Models.Users", "user")
                        .WithMany()
                        .HasForeignKey("userRef");

                    b.Navigation("balance");

                    b.Navigation("commission");

                    b.Navigation("role");

                    b.Navigation("user");
                });

            modelBuilder.Entity("MarketingCoinBase.Models.AccountBalances", b =>
                {
                    b.Navigation("users");
                });
#pragma warning restore 612, 618
        }
    }
}
